# applyen op 5.0.10 release van hibernate voor wf10
diff --git a/hibernate-infinispan/src/main/java/org/hibernate/cache/infinispan/access/NonTxInvalidationCacheAccessDelegate.java b/hibernate-infinispan/src/main/java/org/hibernate/cache/infinispan/access/NonTxInvalidationCacheAccessDelegate.java
index 3c0be3179b..58608a1928 100644
--- a/hibernate-infinispan/src/main/java/org/hibernate/cache/infinispan/access/NonTxInvalidationCacheAccessDelegate.java
+++ b/hibernate-infinispan/src/main/java/org/hibernate/cache/infinispan/access/NonTxInvalidationCacheAccessDelegate.java
@@ -8,6 +8,7 @@ package org.hibernate.cache.infinispan.access;
 
 import org.hibernate.cache.CacheException;
 import org.hibernate.cache.infinispan.impl.BaseRegion;
+import org.hibernate.cache.infinispan.util.Caches;
 import org.hibernate.cache.spi.access.SoftLock;
 import org.hibernate.engine.spi.SessionImplementor;
 import org.hibernate.resource.transaction.TransactionCoordinator;
@@ -133,4 +134,17 @@ public class NonTxInvalidationCacheAccessDelegate extends InvalidationCacheAcces
 		}
 		return false;
 	}
+
+	@Override
+	public void removeAll() throws CacheException {
+		try {
+			if (!putValidator.beginInvalidatingRegion()) {
+				log.error("Failed to invalidate pending putFromLoad calls for region " + region.getName());
+			}
+			cache.clear();
+		}
+		finally {
+			putValidator.endInvalidatingRegion();
+		}
+	}
 }
diff --git a/hibernate-infinispan/src/main/java/org/hibernate/cache/infinispan/impl/BaseRegion.java b/hibernate-infinispan/src/main/java/org/hibernate/cache/infinispan/impl/BaseRegion.java
index dbddd19924..2a3aac0cc8 100644
--- a/hibernate-infinispan/src/main/java/org/hibernate/cache/infinispan/impl/BaseRegion.java
+++ b/hibernate-infinispan/src/main/java/org/hibernate/cache/infinispan/impl/BaseRegion.java
@@ -244,7 +244,7 @@ public abstract class BaseRegion implements Region {
 		// When we don't have transaction, we can do a clear operation (since we don't
 		// case about context) and can't do the one-by-one remove: remove() on tx cache
 		// requires transactional context.
-		if ( inTransaction ) {
+		if ( inTransaction && cache.getCacheConfiguration().transaction().transactionMode().isTransactional() ) {
 			log.tracef( "Transaction, clearing one element at the time" );
 			Caches.removeAll( localAndSkipLoadCache );
 		}
diff --git a/hibernate-infinispan/src/main/java/org/hibernate/cache/infinispan/timestamp/ClusteredTimestampsRegionImpl.java b/hibernate-infinispan/src/main/java/org/hibernate/cache/infinispan/timestamp/ClusteredTimestampsRegionImpl.java
index 4432951128..6c327fd542 100644
--- a/hibernate-infinispan/src/main/java/org/hibernate/cache/infinispan/timestamp/ClusteredTimestampsRegionImpl.java
+++ b/hibernate-infinispan/src/main/java/org/hibernate/cache/infinispan/timestamp/ClusteredTimestampsRegionImpl.java
@@ -146,4 +146,12 @@ public class ClusteredTimestampsRegionImpl extends TimestampsRegionImpl {
 		localCache.remove( event.getKey() );
 	}
 
+
+	@Override
+	public void put(SessionImplementor session, final Object key, final Object value)
+			throws CacheException
+	{
+		super.put(session, key, value);
+		localCache.put(key, value);
+	}
 }
